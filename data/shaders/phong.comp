#include "common.glsl"

const vec3 lightDir = vec3(100, 100, 100);

vec3 RayColor(inout Ray ray) {
    if (HitScene(ray)) {
        ray.origin = ray.origin + ray.t * ray.direction;
        float diffuse = dot(normalize(vec3(0.0, 100.0, 10.0)), ray.hitNormal);;
        float ambient = 0.1;
        diffuse = max(diffuse, 0.0);
        Material mat = g_materials[ray.materialId];
        if (mat.emissive.r + mat.emissive.g + mat.emissive.b > 0.1) {
            return vec3(1.0);
        }
        vec3 diffuseColor = texture(albedoTexture, vec3(ray.hitUv, mat.albedoMapLevel)).rgb;
        diffuseColor = mix(vec3(1.0), diffuseColor, ray.hasAlbedoMap);
        return (diffuse + ambient) * diffuseColor;
    }

    return vec3(0.0);
}

void main() {
    // random seed
    // [0, width], [0, height]
    ivec2 iPixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 fPixelCoords = vec2(float(iPixelCoords.x), float(iPixelCoords.y));
    ivec2 dims = imageSize(outImage);

    vec3 rayDir;
    {
        // screen position from [-1, 1]
        vec2 uvJitter = fPixelCoords / dims;
        vec2 screen = 2.0 * uvJitter - 1.0;

        // adjust for aspect ratio
        vec2 resolution = vec2(float(dims.x), float(dims.y));
        float aspectRatio = resolution.x / resolution.y;
        screen.y /= aspectRatio;
        float halfFov = camFov;
        float camDistance = tan(halfFov * PI / 180.0);
        rayDir = vec3(screen, camDistance);
        rayDir = normalize(mat3(camRight, camUp, camFwd) * rayDir);
    }

    Ray ray;
    ray.origin = camPos;
    ray.direction = rayDir;
    ray.t = RAY_T_MAX;

    vec4 pixel = vec4(RayColor(ray), 1.0);
    imageStore(outImage, iPixelCoords, pixel);
}
